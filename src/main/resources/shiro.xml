<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
       	   http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans-4.3.xsd  
           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd 
           http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd  
           http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
           http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd">
	
	<!-- 1. 配置 SecurityManager! -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
	<!--
		<property name="cacheManager"  ref="cacheManager" />
		<property name="authenticator" ref="authenticator" />
	-->
		<property name="realms">
			<list> <!-- 配置shiro 实现类  -->	
				<ref bean="shiroRealm" />
			</list>
		</property>
		
		<!-- shiro cookie 时长  单位秒 -->
		<property name="rememberMeManager.cookie.maxAge" value="259200"/>
	</bean>
	
	<!-- 2. 配置 CacheManager. 
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:ehcache.xml" />
	</bean>
	-->
	
	<!-- 2.1 需要加入 ehcache 的 jar 包及配置文件.
	<bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
		<property name="authenticationStrategy">
			<bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"/>
		</property>
	</bean>
	  -->
	
	<!-- 
	 	  3. 配置 Realm 
		  3.1 直接配置实现了 org.apache.shiro.realm.Realm 接口的 bean
 	-->
	<bean id="shiroRealm" class="com.dome.config.shiro.realm.ShiroRealm">
		<!-- 使用shiro 对数据库 密码加密 校验
		  <property name="credentialsMatcher">
			<bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
				<property name="hashAlgorithmName" value="MD5"/>
				散列迭代次数，需要和生成密码时的一样
				<property name="hashIterations" value="1024"/> 
				表示是否存储散列后的密码为16 进制，需要和生成密码时的一样，默认是base64 
				<property name="storedCredentialsHexEncoded" value="false"/>
			</bean>
		  </property>
		 -->
	</bean>

	<!-- === Shiro Spring-specific integration === -->
	<!-- 
		4. 配置 LifecycleBeanPostProcessor. 可以自定的来调用配置在 Spring IOC 容器中 shiro bean 的生命周期方法
	-->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- 5. 启用 IOC 容器中使用 shiro 的注解. 但必须在配置了 LifecycleBeanPostProcessor 之后才可以使用 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		depends-on="lifecycleBeanPostProcessor" />
		
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager" />
	</bean>
    
	<!-- 
		6. 配置 ShiroFilter. 
	    6.1：
	    id 必须和 web.xml 文件中配置的 DelegatingFilterProxy 的 <filter-name> 一致. 
		若不一致, 则会抛出: NoSuchBeanDefinitionException. 
		因为 Shiro 会来 IOC 容器中查找和 <filter-name> 名字对应的 filter bean. 
	-->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" /> <!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="loginUrl" value="/exhibition/cms/dist/index.html" /> <!-- 登录页面 -->

	<!-- 引入自己写的 权限类
		<property name="filterChainDefinitionMap" ref="filterChainDefinitionMap" />
    -->
    
	<!-- 配置哪些页面需要受保护. 以及访问这些页面需要的权限. 
		1). anon 可以被匿名访问 
		2). authc 必须认证(即登录)后才可能访问的页面. 
		3). logout 登出. 
		4). roles 角色过滤器
	 -->
	 	<!-- Shiro连接约束配置,即过滤链的定义 /login/logout.do = logout -->
		<property name="filterChainDefinitions"> 
			<value>
				/login/login.do = anon
				/login/validateCode.do = anon
				/columnRemote/** = anon
				/bannerRemote/** = anon
				/newsRemote/** = anon
				/videoRemote/**  = anon
				/materialsRemote/** = anon
				
				# 远程数据调用接口
				  
				 # 配置静态资源可以匿名访问
                /css/** = anon
                /js/** = anon
                /images/** = anon
                /exhibition/jsp/js/** = anon
                /exhibition/cms/** = anon
                
				# everything else requires authentication: 
				/** = authc 
			</value> 
		</property>
	</bean>

	<!-- 配置一个 bean, 该 bean 实际上是一个 Map. 通过实例工厂方法的方式
		<bean id="filterChainDefinitionMap" factory-bean="filterChainDefinitionMapBuilder"
			factory-method="buildFilterChainDefinitionMap">
		</bean>
		
		<bean id="filterChainDefinitionMapBuilder" class="com.atguigu.shiro.factory.FilterChainDefinitionMapBuilder">
		</bean>
	 -->


</beans>